diff --git a/commands/server.go b/commands/server.go
index da6313f1..88374c74 100644
--- a/commands/server.go
+++ b/commands/server.go
@@ -45,6 +45,10 @@ import (
        "github.com/gohugoio/hugo/helpers"
        "github.com/spf13/afero"
        "github.com/spf13/cobra"
+
+       "github.com/ngrok/ngrok-go"
+       ngconfig "github.com/ngrok/ngrok-go/config"
+
        jww "github.com/spf13/jwalterweatherman"
 )

@@ -62,6 +66,7 @@ type serverCmd struct {
        liveReloadPort     int
        serverWatch        bool
        noHTTPCache        bool
+       serverDomain       string

        disableFastRender   bool
        disableBrowserError bool
@@ -104,6 +109,7 @@ of a second, you will be able to save and see your changes nearly instantly.`,
        cc.cmd.Flags().IntVarP(&cc.serverPort, "port", "p", 1313, "port on which the server will listen")
        cc.cmd.Flags().IntVar(&cc.liveReloadPort, "liveReloadPort", -1, "port for live reloading (i.e. 443 in HTTPS proxy situations)")
        cc.cmd.Flags().StringVarP(&cc.serverInterface, "bind", "", "127.0.0.1", "interface to which the server will bind")
+       cc.cmd.Flags().StringVarP(&cc.serverDomain, "domain", "", "", "domain to listen on")
        cc.cmd.Flags().BoolVarP(&cc.serverWatch, "watch", "w", true, "watch filesystem for changes and recreate as needed")
        cc.cmd.Flags().BoolVar(&cc.noHTTPCache, "noHTTPCache", false, "prevent HTTP caching")
        cc.cmd.Flags().BoolVarP(&cc.serverAppend, "appendPort", "", true, "append port to baseURL")
@@ -189,6 +195,23 @@ func (sc *serverCmd) server(cmd *cobra.Command, args []string) error {

                        currentServerPort := sc.serverPort

+                       if sc.serverDomain != "" {
+                               tun, err := ngrok.StartTunnel(cmd.Context(),
+                                       ngconfig.HTTPEndpoint(
+                                               ngconfig.WithDomain(sc.serverDomain),
+                                       ),
+                                       ngrok.WithAuthtokenFromEnv(),
+                               )
+                               if err != nil {
+                                       rerr = err
+                                       return
+                               }
+                               c.serverPorts[0] = serverPortListener{ln: tun, p: 0}
+                               sc.serverAppend = false
+                               sc.baseURL = tun.URL()
+                               return
+                       }
+
                        for i := 0; i < len(c.serverPorts); i++ {
                                l, err := net.Listen("tcp", net.JoinHostPort(sc.serverInterface, strconv.Itoa(currentServerPort)))
                                if err == nil {
